// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/http/v1/history/handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	context "context"
	reflect "reflect"

	history "github.com/VrMolodyakov/segment-api/internal/domain/history"
	gomock "github.com/golang/mock/gomock"
)

// MockHistoryService is a mock of HistoryService interface.
type MockHistoryService struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryServiceMockRecorder
}

// MockHistoryServiceMockRecorder is the mock recorder for MockHistoryService.
type MockHistoryServiceMockRecorder struct {
	mock *MockHistoryService
}

// NewMockHistoryService creates a new mock instance.
func NewMockHistoryService(ctrl *gomock.Controller) *MockHistoryService {
	mock := &MockHistoryService{ctrl: ctrl}
	mock.recorder = &MockHistoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryService) EXPECT() *MockHistoryServiceMockRecorder {
	return m.recorder
}

// GetUsersHistory mocks base method.
func (m *MockHistoryService) GetUsersHistory(ctx context.Context, date history.Date) ([]history.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersHistory", ctx, date)
	ret0, _ := ret[0].([]history.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersHistory indicates an expected call of GetUsersHistory.
func (mr *MockHistoryServiceMockRecorder) GetUsersHistory(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersHistory", reflect.TypeOf((*MockHistoryService)(nil).GetUsersHistory), ctx, date)
}

// PrepareHistoryData mocks base method.
func (m *MockHistoryService) PrepareHistoryData(ctx context.Context, date history.Date) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareHistoryData", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareHistoryData indicates an expected call of PrepareHistoryData.
func (mr *MockHistoryServiceMockRecorder) PrepareHistoryData(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareHistoryData", reflect.TypeOf((*MockHistoryService)(nil).PrepareHistoryData), ctx, date)
}

// MockBufferPool is a mock of BufferPool interface.
type MockBufferPool struct {
	ctrl     *gomock.Controller
	recorder *MockBufferPoolMockRecorder
}

// MockBufferPoolMockRecorder is the mock recorder for MockBufferPool.
type MockBufferPoolMockRecorder struct {
	mock *MockBufferPool
}

// NewMockBufferPool creates a new mock instance.
func NewMockBufferPool(ctrl *gomock.Controller) *MockBufferPool {
	mock := &MockBufferPool{ctrl: ctrl}
	mock.recorder = &MockBufferPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferPool) EXPECT() *MockBufferPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBufferPool) Get() *bytes.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*bytes.Buffer)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockBufferPoolMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBufferPool)(nil).Get))
}

// Release mocks base method.
func (m *MockBufferPool) Release(buf *bytes.Buffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", buf)
}

// Release indicates an expected call of Release.
func (mr *MockBufferPoolMockRecorder) Release(buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockBufferPool)(nil).Release), buf)
}
