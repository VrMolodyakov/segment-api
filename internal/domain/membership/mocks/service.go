// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/membership/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	membership "github.com/VrMolodyakov/segment-api/internal/domain/membership"
	segment "github.com/VrMolodyakov/segment-api/internal/domain/segment"
	user "github.com/VrMolodyakov/segment-api/internal/domain/user"
	gomock "github.com/golang/mock/gomock"
)

// MockMembershipRepository is a mock of MembershipRepository interface.
type MockMembershipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMembershipRepositoryMockRecorder
}

// MockMembershipRepositoryMockRecorder is the mock recorder for MockMembershipRepository.
type MockMembershipRepositoryMockRecorder struct {
	mock *MockMembershipRepository
}

// NewMockMembershipRepository creates a new mock instance.
func NewMockMembershipRepository(ctrl *gomock.Controller) *MockMembershipRepository {
	mock := &MockMembershipRepository{ctrl: ctrl}
	mock.recorder = &MockMembershipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembershipRepository) EXPECT() *MockMembershipRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMembershipRepository) CreateUser(ctx context.Context, user user.User, hitPercentage int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, hitPercentage)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMembershipRepositoryMockRecorder) CreateUser(ctx, user, hitPercentage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMembershipRepository)(nil).CreateUser), ctx, user, hitPercentage)
}

// DeleteSegment mocks base method.
func (m *MockMembershipRepository) DeleteSegment(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockMembershipRepositoryMockRecorder) DeleteSegment(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockMembershipRepository)(nil).DeleteSegment), ctx, name)
}

// GetUserSegments mocks base method.
func (m *MockMembershipRepository) GetUserSegments(ctx context.Context, userID int64) ([]membership.MembershipInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", ctx, userID)
	ret0, _ := ret[0].([]membership.MembershipInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockMembershipRepositoryMockRecorder) GetUserSegments(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockMembershipRepository)(nil).GetUserSegments), ctx, userID)
}

// UpdateUserSegments mocks base method.
func (m *MockMembershipRepository) UpdateUserSegments(ctx context.Context, userID int64, addSegments []segment.Segment, deleteSegments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSegments", ctx, userID, addSegments, deleteSegments)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSegments indicates an expected call of UpdateUserSegments.
func (mr *MockMembershipRepositoryMockRecorder) UpdateUserSegments(ctx, userID, addSegments, deleteSegments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSegments", reflect.TypeOf((*MockMembershipRepository)(nil).UpdateUserSegments), ctx, userID, addSegments, deleteSegments)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(key int64) ([]membership.MembershipInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]membership.MembershipInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCache) Set(key int64, value []membership.MembershipInfo, expireAt time.Duration) []membership.MembershipInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expireAt)
	ret0, _ := ret[0].([]membership.MembershipInfo)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, value, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, value, expireAt)
}
